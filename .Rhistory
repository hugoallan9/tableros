{
name: 'A-1-1',
value: 6
},
{
name: 'A-1-2',
value: 2
}
]
},
{
name: 'A-2',
value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'vintagge')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
# Prepare sample data for plotting --------------------------
dat <- "[{name: 'A',
value: 6,
children: [
{
name: 'A-1',
value: 6,
children:[
{
name: 'A-1-1',
value: 6
},
{
name: 'A-1-2',
value: 2
}
]
},
{
name: 'A-2',
value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'vintage')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
# Prepare sample data for plotting --------------------------
dat <- "[{name: 'A',
value: 6,
children: [
{
name: 'A-1',
value: 6,
children:[
{
name: 'A-1-1',
value: 6
},
{
name: 'A-1-2',
value: 2
}
]
},
{
name: 'A-2',
value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'infographic')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
# Prepare sample data for plotting --------------------------
dat <- "[{name: 'A',
value: 6,
children: [
{
name: 'A-1',
value: 6,
children:[
{
name: 'A-1-1',
value: 6
},
{
name: 'A-1-2',
value: 2
}
]
},
{
name: 'A-2',
value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'shine')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
# Prepare sample data for plotting --------------------------
dat <- "[{name: 'A',
value: 6,
children: [
{
name: 'A-1',
value: 6,
children:[
{
name: 'A-1-1',
value: 6
},
{
name: 'A-1-2',
value: 2
}
]
},
{
name: 'A-2',
value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'jazz')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
# Prepare sample data for plotting --------------------------
dat <- "[{name: 'A',
value: 6,
children: [
{
name: 'A-1',
value: 6,
children:[
{
name: 'A-1-1',
value: 6
},
{
name: 'A-1-2',
value: 2
}
]
},
{
name: 'A-2',
value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'jazz')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
install.packages('d3treeR')
devtools::install_github("gluc/data.tree")
devtools::install_github("timelyportfolio/d3treeR")
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
install.packages("ggplot2movies")
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
shiny::runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
shiny::runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
shiny::runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
