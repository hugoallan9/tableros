value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'jazz')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
# Prepare sample data for plotting --------------------------
dat <- "[{name: 'A',
value: 6,
children: [
{
name: 'A-1',
value: 6,
children:[
{
name: 'A-1-1',
value: 6
},
{
name: 'A-1-2',
value: 2
}
]
},
{
name: 'A-2',
value: 3
}
]
},
{
name: 'B',
value: 6,
children: [
{name : 'B-1',
value:10
},
{
name:'B-2',
value:2
}
]
},
{
name: 'C',
value: 4
}]"
# Server function -------------------------------------------
server <- function(input, output) {
# Call functions from ECharts2Shiny to render charts
renderTreeMap(div_id = "test",
data = dat, theme = 'jazz')
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:100%;height:500px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
install.packages('d3treeR')
devtools::install_github("gluc/data.tree")
devtools::install_github("timelyportfolio/d3treeR")
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
install.packages("ggplot2movies")
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
library(treemap)
library(d3treeR)
library(reshape2)
# Lab assignment
# install.packages("ggplot2movies")
library(ggplot2movies)
data(movies)
head(movies)
m <- na.omit(movies)
long_m <- melt(m, id.vars = colnames(m)[1:17])
long_m <- subset(long_m, value==1)
long_m$Genre <- factor(long_m$variable)
my_df <- subset(long_m, select = c(title, budget, rating, Genre))
my_df <-my_df[sample(1:nrow(my_df), 200, F),]
my_df$budget <- my_df$budget/100000
# Design an interactive treemap visualization for the movies dataset
# ?treemap to customize various features such as color
# Can you change the default tooltip?
ui <- fluidPage(
# Application title
titlePanel("Movies Visualization"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
fluidRow(d3tree2Output("plot", width = "100%", height = "400px"))
)
server <- function(input, output) {
output$plot <- renderD3tree2(d3tree2(treemap(my_df,
index=c("Genre", "title"),
vSize="budget",
vColor="rating",
type="value",
palette = input$palette,
format.legend = list(scientific = FALSE, big.mark = " ")), rootname = "Genre"))
}
shinyApp(ui = ui, server = server)
shiny::runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
shiny::runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
shiny::runApp('/mnt/Datos/GitHub/tableros')
tabla_temp
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ), by = jerarquia_dimension_regreso( length(jerarquia_dimension_regreso) ) ]
jerarquia_dimension_regreso( length(jerarquia_dimension_regreso) )
jerarquia_dimension_regreso( length(jerarquia_dimension_regreso) )
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) ) }
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) ) ]
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso)  ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ), by = jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) ] ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ), by = jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) ] ]
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) ]
jerarquia_dimension_regreso
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso), by = "Grupo Gasto" ]
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso), .SD(metricas, sum, na.rm = T ) , by = "Grupo Gasto", .SDcol(metricas) ]
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso), lapply(.SD(metricas, sum, na.rm = T ) ) , by = "Grupo Gasto", .SDcols(metricas) ]
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso), lapply(.SD(sum, na.rm = T ) ) , by = "Grupo Gasto", .SDcols(metricas) ]
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso), lapply(.SD, sum, na.rm = T  ) , by = "Grupo Gasto", .SDcols(metricas) ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ), lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", SDcols = metricas ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ), lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", SDcols = metricas ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ),  ]
View(tabla_temp)
tabla_temp <- datos_principales$data[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", SDcols = metricas  ]
tabla_temp <- datos_principales$data[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", SDcols = metricas  ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", SDcols = metricas  ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", SDcols = metricas  ]
??data.table
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), SDcols = metricas  ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), SDcols = metricas, by= "Grupo Gasto" ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), SDcols = get(metricas), by= "Grupo Gasto" ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto" ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto" ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto" ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Departamento" ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= Departamento ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", SDcols=metricas ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", .SDcols=metricas ]
tabla_temp
codigo = as.character( tabla_parejamientos[tabla_parejamientos$nombres_reales == jerarquia_dimension_regreso[[z]],][[3]] )
codigo
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Grupo Gasto", .SDcols=metricas ]
runApp('/mnt/Datos/GitHub/tableros')
jerarquia_dimension_regreso
jerarquia_valor_dimension_regreso
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= "Departamento", .SDcols=metricas ]
tabla_temp
runApp('/mnt/Datos/GitHub/tableros')
codeigo
codigo
jerarquia_valor_dimension_regreso
runApp('/mnt/Datos/GitHub/tableros')
codigo
cadena_filtro <- paste0(cadena_filtro, '&', codigo)
tabla_dinamica
tabla_temp
cadena_filtro
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
cadena_filtro
cadena_filtro = paste0(cadena_filtro, ' & ', "'", codigo, "'")
cadena_filtro
runApp('/mnt/Datos/GitHub/tableros')
cadena_filtro
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
runApp('/mnt/Datos/GitHub/tableros')
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
tabla_temp
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ), codigo ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ), get(codigo) ]
tabla_temp
shiny::runApp('/mnt/Datos/GitHub/tableros')
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
jerarquia_dimension_regreso
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by=  jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) - 1  ] , .SDcols=metricas ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by=  get( jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) - 1  ]  ), .SDcols=metricas ]
jerarquia_dimension_regreso[1]
jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) - 1  ]
get( jerarquia_dimension_regreso[ length(jerarquia_dimension_regreso) - 1  ]  )
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by=  get( jerarquia_dimension_regreso[ indice   ]  ), .SDcols=metricas ]
indice <- length( jerarquia_dimension_regreso ) - 1
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by=  get( jerarquia_dimension_regreso[ indice   ]  ), .SDcols=metricas ]
agrupacion <- jerarquia_dimension_regreso[ length( jerarquia_dimension_regreso ) - 1 ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by=  get( agrupacion  ), .SDcols=metricas ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= agrupacion  , .SDcols=metricas ]
agrupacion <- as.character( jerarquia_dimension_regreso[ length( jerarquia_dimension_regreso ) - 1 ] )
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= agrupacion  , .SDcols=metricas ]
View(tabla_temp)
runApp()
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
agrupacion <- as.character( jerarquia_dimension_regreso[ length( jerarquia_dimension_regreso ) - 1 ] )
tabla_temp <- tabla_temp[codigo , lapply(.SD, sum, na.rm =  T), by= agrupacion  , .SDcols=metricas ]
codigo = as.character( tabla_parejamientos[tabla_parejamientos$nombres_reales == jerarquia_dimension_regreso[[ length(jerarquia_valor_dimension_regreso)   ]],][[3]] )
tabla_temp <- tabla_temp[codigo , lapply(.SD, sum, na.rm =  T), by= agrupacion  , .SDcols=metricas ]
tabla_temp
tabla_temp <- tabla_temp[, lapply(.SD, sum, na.rm =  T), by= agrupacion  , .SDcols=metricas ]
runApp('/mnt/Datos/GitHub/tableros')
View(tabla_temp)
runApp('/mnt/Datos/GitHub/tableros')
dimension_ida
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
tabla_temp
runApp('/mnt/Datos/GitHub/tableros')
tabla_temp
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
colnames( tabla_temp )[colnames( tabla_temp )== eval( parse( text = paste0("'",  codigo, "'" ) ) ) ] <- "Código"
View(tabla_temp)
runApp('/mnt/Datos/GitHub/tableros')
jerarquia_dimension_regreso
jerarquia_valor_dimension_regreso
jerarquia_dimension_regreso
jerarquia_valor_dimension_regreso
dimension_ida
agrupacion
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
contador
jerarquia_dimension_regreso
jerarquia_valor_dimension_regreso
z
z
jerarquia_dimension_regreso
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
jerarquia_valor_dimension_regreso
runApp('/mnt/Datos/GitHub/tableros')
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
cadena_filtro
tabla_temp <- datos_principales$data[ eval( parse(text = "Grupo== 'Administración Central' & Sub Grupo== 'Presidencia, Ministerios de Estado, Secretarias y Otras Dependencias del Ejecutivo'") ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = "Grupo== 'Administración Central' & 'Sub Grupo'== 'Presidencia, Ministerios de Estado, Secretarias y Otras Dependencias del Ejecutivo'") ) ]
View(tabla_temp)
tabla_temp <- datos_principales$data[ eval( parse(text = "Grupo== 'Administración Central' & Sub.Grupo== 'Presidencia, Ministerios de Estado, Secretarias y Otras Dependencias del Ejecutivo'") ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = "'Grupo'== 'Administración Central' ") ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = "'Grupo'== 'Administración Central' ") ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = "Grupo== 'Administración Central' ") ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = "Grupo== 'Administración Central' & Sub\ Grupo== 'Presidencia, Ministerios de Estado, Secretarias y Otras Dependencias del Ejecutivo'") ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = "Grupo== 'Administración Central' & Sub Grupo== 'Presidencia, Ministerios de Estado, Secretarias y Otras Dependencias del Ejecutivo'") ) ]
tabla_temp <- datos_principales$data[ eval( parse(text = "Grupo== 'Administración Central' & `Sub Grupo`== 'Presidencia, Ministerios de Estado, Secretarias y Otras Dependencias del Ejecutivo'") ) ]
View(tabla_temp)
runApp('/mnt/Datos/GitHub/tableros')
dimension_ida
filtro
datos_principales
datos_principales$columnas
filtro
filtro
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
View(valores_filtros)
View(valores_filtros)
datos_principales$val_filtros
datos_principales$valcolumnas
datos_principales$columnas
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
filtro
datos_principales$columnas
runApp('/mnt/Datos/GitHub/tableros')
View(valores_filtros)
runApp('/mnt/Datos/GitHub/tableros')
datos_principales$columnas
datos_principales$columnas
runApp('/mnt/Datos/GitHub/tableros')
datos_principales$columnas
datos_principales$columnas
datos_principales$columnas
filtro
datos_principales$columnas
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
mtcars
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
datos_principales$tabla_temporal[s, drop = F]
runApp()
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
datos_principales$tabla_temporal[s,
, drop = F]
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
jerarquia_dimension_regreso
jerarquia_valor_dimension_regreso
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
tabla_temp
tabla_temp <- datos_principales$data[ eval( parse(text = cadena_filtro) ) ]
tabla_temp <- tabla_temp[ , lapply(.SD, sum, na.rm =  T), by= c(codigo, agrupacion)  , .SDcols=metricas ]
tabla_temp
agrupacion <- as.character( jerarquia_dimension_regreso[ lon ] )
agrupacion <- as.character( jerarquia_dimension_regreso[ lon  +1 ] )
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
a
shiny::runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
dimension
intersect(dimension, metricas_comparativas)
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
tabla_merge
tabla_merge <- tabla_merge %>% select(as.name(codigo), Concepto.x, Devengado.x,Devengado.y)
tabla_merge <- tabla_merge %>% select( codigo , Concepto.x, Devengado.x,Devengado.y)
tabla_merge
runApp()
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
runApp('/mnt/Datos/GitHub/tableros')
